name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  static_secrets:
    runs-on: ubuntu-latest
    name: Fetch static secrets
    permissions: 
      id-token: write
      contents: read
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set Up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build with Maven
      run: |
        cd DBSearcher
        mvn clean package

    - name: Build Docker Image
      run: docker build -t spring-boot-ms-sql -f DBSearcher/Dockerfile .
    
    - name: Fetch secrets from aKeyless
      id: fetch-secrets
      uses: LanceMcCarthy/akeyless-action@v3.3.16
      with:
        access-id: ${{ secrets.ACCESS_ID }}
        api-url: 'https://cm.jmendeztech.click/akeyless-api'
        #access-type: 'aws_iam'
        static-secrets: '{"/springbootdeploy/ssh-privatekey":"PRIVATE_KEY"}'

    - name: Deploy to Remote Docker
      env:
        SSH_PRIVATE_KEY: ${{ steps.fetch-secrets.outputs.PRIVATE_KEY }}
        DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        scp -o StrictHostKeyChecking=no -i private_key.pem DBSearcher/target/spring-boot-ms-sql-1.0-SNAPSHOT.war "$DOCKER_USERNAME"@"$DOCKER_HOST":/home/"$DOCKER_USERNAME"/
        scp -o StrictHostKeyChecking=no -i private_key.pem DBSearcher/Dockerfile-ubuntu "$DOCKER_USERNAME"@"$DOCKER_HOST":/home/"$DOCKER_USERNAME"/Dockerfile
        ssh -o StrictHostKeyChecking=no -i private_key.pem "$DOCKER_USERNAME"@"$DOCKER_HOST" "docker build -t spring-boot-ms-sql ."
        ssh -o StrictHostKeyChecking=no -i private_key.pem "$DOCKER_USERNAME"@"$DOCKER_HOST" "docker stop spring-boot-ms-sql || true"
        ssh -o StrictHostKeyChecking=no -i private_key.pem "$DOCKER_USERNAME"@"$DOCKER_HOST" "docker run -d --name spring-boot-ms-sql -p 8080:8080 spring-boot-ms-sql"
